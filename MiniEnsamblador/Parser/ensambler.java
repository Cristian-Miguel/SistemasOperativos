/* Generated By:JavaCC: Do not edit this line. ensambler.java */
import java.util.*;
public class ensambler implements ensamblerConstants {
static Token tok;
static String registros[][] = new String[4][2];
static String variables[][] = new String[5][2];
public static void main(String args[]) throws ParseException {
        ensambler miParser = new ensambler(System.in);
        registros[0][0] = "AX";
        registros[1][0] = "BX";
        registros[2][0] = "CX";
        registros[3][0] = "DX";
        for (int i = 0; i < variables.length; i++){
                for (int j = 0; j < variables[i].length; j++){
                        variables[i][j]="";
                }
        }

        miParser.S();
}

  static final public void S() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(MAIN);
      jj_consume_token(DP);
      producciones();
    }
    jj_consume_token(0);
  }

  static final public void producciones() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMP:
      case MOV:
      case ADD:
      case GET:
      case PRINTR:
      case PRINT:
      case LD:
      case LDI:
      case FREE:
      case MINUS:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        suma();
        break;
      case LD:
        registro();
        break;
      case PRINTR:
        printr();
        break;
      case PRINT:
        print();
        break;
      case LDI:
        variable();
        break;
      case GET:
        obtener();
        break;
      case FREE:
        liberar();
        break;
      case COMP:
        si();
        break;
      case MINUS:
        resta();
        break;
      case MOV:
        mover();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void si() throws ParseException {
    jj_consume_token(COMP);
    jj_consume_token(REG);
    jj_consume_token(COMA);
    jj_consume_token(REG);
    jj_consume_token(FIN);
  }

  static final public void resta() throws ParseException {
                int valorx, valx, valy; String reg1, reg2, val1="", val2="", valor;
    jj_consume_token(MINUS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REG:
      jj_consume_token(REG);
                      reg1 = token.toString();
      break;
    case ID:
      jj_consume_token(ID);
                                                     reg1 = token.toString();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REG:
      jj_consume_token(REG);
                                                                                            reg2 = token.toString();
      break;
    case ID:
      jj_consume_token(ID);
                                                                                                                           reg2 = token.toString();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FIN);
                switch(reg1)
                {
                case "AX": val1=registros[0][1]; break;
                case "BX": val1=registros[1][1]; break;
                case "CX": val1=registros[2][1]; break;
                case "DX": val1=registros[3][1]; break;
                default: for (int x = 0; x < variables.length; x++){
                                                if(variables[x][0].equals(reg1)){
                                                        val1=variables[x][1];
                                                }
                                        } break;
                }
                val1 = val1.substring(1,val1.length()-1);
                valx = Integer.parseInt(val1);
                switch(reg2)
                {
                case "AX": val2=registros[0][1]; break;
                case "BX": val2=registros[1][1]; break;
                case "CX": val2=registros[2][1]; break;
                case "DX": val2=registros[3][1]; break;
                default: for (int x = 0; x < variables.length; x++){
                                                if(variables[x][0].equals(reg2)){
                                                        val2=variables[x][1];
                                                }
                                        } break;
                }
                val2 = val2.substring(1,val2.length()-1);
                valy = Integer.parseInt(val2);
                valorx = valx-valy;
                valor = "'"+Integer.toString(valorx)+"'";

                switch(reg1)
                {
                case "AX": registros[0][1] = valor; break;
                case "BX": registros[1][1] = valor; break;
                case "CX": registros[2][1] = valor; break;
                case "DX": registros[3][1] = valor; break;
                default: for (int x = 0; x < variables.length; x++){
                                                if(variables[x][0].equals(reg1)){
                                                        variables[x][1]=valor;
                                                }
                                        } break;
                }
  }

  static final public void suma() throws ParseException {
               int valorx, valx, valy; String reg1, reg2, val1="", val2="", valor;
    jj_consume_token(ADD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REG:
      jj_consume_token(REG);
                    reg1 = token.toString();
      break;
    case ID:
      jj_consume_token(ID);
                                                   reg1 = token.toString();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REG:
      jj_consume_token(REG);
                                                                                          reg2 = token.toString();
      break;
    case ID:
      jj_consume_token(ID);
                                                                                                                         reg2 = token.toString();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FIN);
                switch(reg1)
                {
                case "AX": val1=registros[0][1]; break;
                case "BX": val1=registros[1][1]; break;
                case "CX": val1=registros[2][1]; break;
                case "DX": val1=registros[3][1]; break;
                default: for (int x = 0; x < variables.length; x++){
                                                if(variables[x][0].equals(reg1)){
                                                        val1=variables[x][1];
                                                }
                                        } break;
                }
                val1 = val1.substring(1,val1.length()-1);
                valx = Integer.parseInt(val1);
                switch(reg2)
                {
                case "AX": val2=registros[0][1]; break;
                case "BX": val2=registros[1][1]; break;
                case "CX": val2=registros[2][1]; break;
                case "DX": val2=registros[3][1]; break;
                default: for (int x = 0; x < variables.length; x++){
                                                if(variables[x][0].equals(reg2)){
                                                        val2=variables[x][1];
                                                }
                                        } break;
                }
                val2 = val2.substring(1,val2.length()-1);
                valy = Integer.parseInt(val2);
                valorx = valx+valy;
                valor = "'"+Integer.toString(valorx)+"'";

                switch(reg1)
                {
                case "AX": registros[0][1] = valor; break;
                case "BX": registros[1][1] = valor; break;
                case "CX": registros[2][1] = valor; break;
                case "DX": registros[3][1] = valor; break;
                default: for (int x = 0; x < variables.length; x++){
                                                if(variables[x][0].equals(reg1)){
                                                        variables[x][1]=valor;
                                                }
                                        } break;
                }
  }

  static final public void mover() throws ParseException {
    jj_consume_token(MOV);
    jj_consume_token(REG);
    jj_consume_token(COMA);
    jj_consume_token(REG);
    jj_consume_token(FIN);
  }

  static final public void registro() throws ParseException {
                   String reg, valor;
    jj_consume_token(LD);
    jj_consume_token(REG);
                  reg = token.toString();
    jj_consume_token(COMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALOR:
      jj_consume_token(VALOR);
                                                         valor = token.toString();
      break;
    case STR:
      jj_consume_token(STR);
                                                                                          valor = token.toString();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if(valor.equals("\u005c"\u005c"")){
                        switch(reg)
                                        {
                                        case "AX": registros[0][1] = null;registros[0][0] = reg; break;
                                        case "BX": registros[1][1] = null;registros[1][0] = reg; break;
                                        case "CX": registros[2][1] = null;registros[2][0] = reg; break;
                                        case "DX": registros[3][1] = null;registros[3][0] = reg; break;
                                        }
                }else{
                        switch(reg)
                                        {
                                        case "AX": registros[0][1] = valor;registros[0][0] = reg; break;
                                        case "BX": registros[1][1] = valor;registros[1][0] = reg; break;
                                        case "CX": registros[2][1] = valor;registros[2][0] = reg; break;
                                        case "DX": registros[3][1] = valor;registros[3][0] = reg; break;
                                        }
                }
    jj_consume_token(FIN);
  }

  static final public void printr() throws ParseException {
    jj_consume_token(PRINTR);
    jj_consume_token(FIN);
         System.out.print(registros[0][0]);
         System.out.print("|");
         System.out.println(registros[0][1]);
         System.out.print(registros[1][0]);
         System.out.print("|");
         System.out.println(registros[1][1]);
         System.out.print(registros[2][0]);
         System.out.print("|");
         System.out.println(registros[2][1]);
         System.out.print(registros[3][0]);
         System.out.print("|");
         System.out.println(registros[3][1]);
  }

  static final public void print() throws ParseException {
                String var="";
    jj_consume_token(PRINT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
                     var = token.toString();
                                        for (int x = 0; x < variables.length; x++){
                                                if(variables[x][0].equals(var)){
                                                        System.out.println(variables[x][0]+": "+variables[x][1]);
                                                }
                                        }
      break;
    case STR:
      jj_consume_token(STR);
                                        System.out.println(token.toString());
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FIN);
  }

  static final public void variable() throws ParseException {
                   String var="", valor="";
    jj_consume_token(LDI);
    jj_consume_token(ID);
                  var = token.toString();
    jj_consume_token(COMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STR:
      jj_consume_token(STR);
                                                       valor = token.toString();
      break;
    case VALOR:
      jj_consume_token(VALOR);
                                                                                           valor = token.toString();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FIN);
                for (int i = 0; i < variables.length; i++){
                        if(variables[i][0].equals(var)){
                                variables[i][1]=valor;
                                break;
                        }else{
                                if(variables[i][0].equals("")){
                                        variables[i][0]=var;
                                        variables[i][1]=valor;
                                        break;
                                }
                        }
                }
  }

  static final public void obtener() throws ParseException {
    jj_consume_token(GET);
    jj_consume_token(RECURSO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      jj_consume_token(VALOR);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(FIN);
  }

  static final public void liberar() throws ParseException {
    jj_consume_token(FREE);
    jj_consume_token(RECURSO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      jj_consume_token(VALOR);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(FIN);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ensamblerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000,0x17ee0,0x17ee0,0x4800000,0x4800000,0x4800000,0x4800000,0x3000000,0x6000000,0x3000000,0x200000,0x200000,};
   }

  /** Constructor with InputStream. */
  public ensambler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ensambler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ensamblerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ensambler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ensamblerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ensambler(ensamblerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ensamblerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
